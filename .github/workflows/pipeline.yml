name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-build:
    name: 'Build and Test'
    runs-on: ubuntu-latest
    environment: prod
    env:
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}

    steps:
      - uses: actions/checkout@v3

      # Backend tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run backend tests
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py test

      # Frontend tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install --legacy-peer-deps

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      # Build Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: file-manager-backend:latest
          build-args: |
            DEBUG=${{ env.DEBUG }}
            SECRET_KEY=${{ env.SECRET_KEY }}
            FRONTEND_URL=${{ env.FRONTEND_URL }}
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_STORAGE_BUCKET_NAME=${{ env.AWS_STORAGE_BUCKET_NAME }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
            RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}
            DATABASE_NAME=${{ env.DATABASE_NAME }}
            DATABASE_USER=${{ env.DATABASE_USER }}
            DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
            DATABASE_HOST=${{ env.DATABASE_HOST }}
            DATABASE_PORT=${{ env.DATABASE_PORT }}

      - name: Build frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          tags: file-manager-frontend:latest
          build-args: |
            FRONTEND_URL=${{ env.FRONTEND_URL }}

  deploy:
    needs: test-and-build
    name: 'Deploy'
    runs-on: ubuntu-latest
    environment: prod
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
      RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USER: ${{ secrets.DATABASE_USER }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
    
    steps:
      - uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Build and push Backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
          build-args: |
            DEBUG=${{ env.DEBUG }}
            SECRET_KEY=${{ env.SECRET_KEY }}
            FRONTEND_URL=${{ env.FRONTEND_URL }}
            AWS_REGION=${{ env.AWS_REGION }}
            AWS_STORAGE_BUCKET_NAME=${{ env.AWS_STORAGE_BUCKET_NAME }}
            AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
            RDS_ENDPOINT=${{ env.RDS_ENDPOINT }}
            DATABASE_NAME=${{ env.DATABASE_NAME }}
            DATABASE_USER=${{ env.DATABASE_USER }}
            DATABASE_PASSWORD=${{ env.DATABASE_PASSWORD }}
            DATABASE_HOST=${{ env.DATABASE_HOST }}
            DATABASE_PORT=${{ env.DATABASE_PORT }}

      # Build and push Frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FRONTEND }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}
          build-args: |
            FRONTEND_URL=${{ env.FRONTEND_URL }}